#!/bin/bash
#
# cvmfsexec-osg-wrapper
#
# Runs the specified command with CVMFS repos mounted (using cvmfsexec if
# possible, otherwise mountrepo) in a temp directory; the directory will be
# in the command's environment as $CVMFS_BASE.
#
# Clones the cvmfsexec repo from GitHub in order to create the environment;
# checks out the latest tagged version.
# Normally bails on an error; pass `-safe` as the first argument in order
# to run the command anyway (without CVMFS).
#
# To use this in jobs, edit blah.config and set
#
#       blah_job_wrapper=/path/to/cvmfsexec-osg-wrapper
#
# or
#
#       blah_job_wrapper=/path/to/cvmfsexec-osg-wrapper -safe
#
# Then set CVMFSEXEC_REPOS in the environment to a comma-or-space-separated
# list of CVMFS repos to mount.
#
# Other variables:
# - CVMFS_HTTP_PROXY: the proxy to use for CVMFS
# - UMOUNTREPO_UNMOUNT_ALL:
#       no effect unless using `mountrepo`; set this to unmount all mounted
#       repos before and after.  This makes cleanup more reliable but may
#       conflict if multiple copies of this script are running, so only use
#       it with whole-machine jobs.

CVMFSEXEC_REPOS=$(tr -s ',' ' ' <<<"${CVMFSEXEC_REPOS-}")
CVMFS_HTTP_PROXY=${CVMFS_HTTP_PROXY-}
UMOUNTREPO_UNMOUNT_ALL=${UMOUNTREPO_UNMOUNT_ALL-}

if [[ -z $CVMFSEXEC_REPOS ]]; then
    exec "$@"
fi

SAFE=false
if [[ $1 = -safe ]]; then
    SAFE=true
    shift
fi

job=("$@")

fail () {
    echo "$@" >&2
    if $SAFE; then
        # so it shows up in environment dumps in the job
        export CVMFSEXEC_WRAPPER_FAILURE="$*"
        echo "*** $0 failed; cvmfs will be unavailable ***" >&2
        "${job[@]}"
        exit $?
    else
        exit 1
    fi
}


add_or_replace () {
    local file="$1"
    local var="$2"
    local value="$3"

    if [[ -e $file ]] && grep -Eq "^${var}=" "$file"; then
        sed -i -r -e "s^${var}=.*${var}=\"${value}\"" "$file"
    else
        echo "${var}=\"${value}\"" >> "$file"
    fi
}


#
# Begin
#

set -o nounset
PS4='+ ${LINENO}: '
#set -x

prevdir=$(pwd)
if [[ -n ${CVMFSEXEC_WRAPPER_WORKDIR:-} ]]; then
    workdir=$CVMFSEXEC_WRAPPER_WORKDIR
    mkdir -p "$workdir"
    chmod 0700 "$workdir"
    rm -rf "$workdir"/cvmfsexec >& /dev/null || :
else
    workdir=$(mktemp -d "${OSG_WN_TMP:-${TMPDIR:-/tmp}}/$USER-cvmfsexec-XXXXXX")
fi
trap 'cd "$prevdir"; rm -rf "$workdir"' EXIT
cd "$workdir" || fail "Couldn't enter work dir $workdir"

# Obtain cvmfsexec and the OSG CVMFS distribution
git clone https://github.com/cvmfs/cvmfsexec || fail "Error downloading cvmfsexec from GitHub"
cd cvmfsexec
# Check out latest tagged version. Only git 2.0+ has "git tag --sort"
version_tags=$(git tag --list 'v*' | sort -V)
tag=$(tail -n 1 <<<"$version_tags")
[[ -n $tag ]] || fail "Couldn't get latest tagged version"
git checkout "$tag" || fail "Couldn't switch to $tag"
./makedist osg || fail "Couldn't get osg cvmfs distribution"

# Add local configuration if any
cvmfs_local_config=$workdir/cvmfsexec/dist/etc/cvmfs/default.local
if [[ -e $workdir/cvmfsexec/default.local ]]; then
    cp -f "$workdir/cvmfsexec/default.local"  "$cvmfs_local_config"
fi

if [[ -n $CVMFS_HTTP_PROXY ]]; then
    echo >&2 "Setting CVMFS_HTTP_PROXY to ${CVMFS_HTTP_PROXY}"
    add_or_replace "$cvmfs_local_config" CVMFS_HTTP_PROXY "${CVMFS_HTTP_PROXY}"
fi

# If we have to use this script to mount CVMFS, we can't use images from there anyway.
export ALLOW_NONCVMFS_IMAGES=true

echo >&2 "*** Running cvmfsexec smoke test:"
if "$workdir"/cvmfsexec/cvmfsexec -N -- /bin/true; then
    echo >&2 "*** cvmfsexec smoke test passed: you have the permissions to run cvmfsexec directly"

    # cvmfsexec lets us have CVMFS mounted at `/cvmfs`; set $CVMFS_BASE for
    # consistency with the mountrepo path

    export CVMFS_BASE=/cvmfs
    export GLIDEIN_SINGULARITY_BINDPATH="$CVMFS_BASE:/cvmfs"
    echo "*** cvmfs available at $CVMFS_BASE" >&2

    # Note: do not use 'exec'; cleanup won't run
    "$workdir"/cvmfsexec/cvmfsexec -N $CVMFSEXEC_REPOS -- "$@"
else
    echo >&2 "*** cvmfsexec smoke test failed: will use mountrepo instead"
    command -v fusermount >& /dev/null || fail "Required command 'fusermount' not found"

    if [[ -n $UMOUNTREPO_UNMOUNT_ALL ]]; then
        "$workdir"/cvmfsexec/umountrepo -a || :
    fi

    mounted_repos=

    unmount_repos () {
        if [[ -n $UMOUNTREPO_UNMOUNT_ALL ]]; then
            "$workdir"/cvmfsexec/umountrepo -a || :
        else
            for repo in $mounted_repos; do
                "$workdir"/cvmfsexec/umountrepo "$repo" || :
            done
        fi
    }

    trap 'unmount_repos; cd "$prevdir"; rm -rf "$workdir"' EXIT

    # Mount repos
    for repo in config-osg.opensciencegrid.org $CVMFSEXEC_REPOS; do
        if ! "$workdir"/cvmfsexec/mountrepo "$repo"; then
            echo "$repo mount failed, dumping logs:" >&2
            tail -n 20 "$workdir"/cvmfsexec/log/"$repo".log >&2
            fail "Unable to mount cvmfs repo $repo"
        fi
        mounted_repos="$mounted_repos $repo"
    done

    # mountrepo can't mount CVMFS to `/cvmfs`.  Set $CVMFS_BASE to its
    # location so scripts know where to find it.

    export CVMFS_BASE="$workdir"/cvmfsexec/dist/cvmfs
    export GLIDEIN_SINGULARITY_BINDPATH="$CVMFS_BASE:/cvmfs"
    echo "*** cvmfs available at $CVMFS_BASE" >&2

    # Note: do not use 'exec'; cleanup won't run
    "$@"
fi
